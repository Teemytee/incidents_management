/*
 * This file is generated by jOOQ.
 */
package com.example.springJooq.tables.records;


import com.example.springJooq.tables.Dep;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DepRecord extends UpdatableRecordImpl<DepRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.dep.name</code>.
     */
    public void setName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.dep.name</code>.
     */
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.dep.descript</code>.
     */
    public void setDescript(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.dep.descript</code>.
     */
    public String getDescript() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Dep.DEP.NAME;
    }

    @Override
    public Field<String> field2() {
        return Dep.DEP.DESCRIPT;
    }

    @Override
    public String component1() {
        return getName();
    }

    @Override
    public String component2() {
        return getDescript();
    }

    @Override
    public String value1() {
        return getName();
    }

    @Override
    public String value2() {
        return getDescript();
    }

    @Override
    public DepRecord value1(String value) {
        setName(value);
        return this;
    }

    @Override
    public DepRecord value2(String value) {
        setDescript(value);
        return this;
    }

    @Override
    public DepRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DepRecord
     */
    public DepRecord() {
        super(Dep.DEP);
    }

    /**
     * Create a detached, initialised DepRecord
     */
    public DepRecord(String name, String descript) {
        super(Dep.DEP);

        setName(name);
        setDescript(descript);
    }
}
