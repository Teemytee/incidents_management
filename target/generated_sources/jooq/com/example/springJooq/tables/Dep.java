/*
 * This file is generated by jOOQ.
 */
package com.example.springJooq.tables;


import com.example.springJooq.Keys;
import com.example.springJooq.Public;
import com.example.springJooq.tables.records.DepRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dep extends TableImpl<DepRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dep</code>
     */
    public static final Dep DEP = new Dep();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepRecord> getRecordType() {
        return DepRecord.class;
    }

    /**
     * The column <code>public.dep.name</code>.
     */
    public final TableField<DepRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.dep.descript</code>.
     */
    public final TableField<DepRecord, String> DESCRIPT = createField(DSL.name("descript"), SQLDataType.CLOB.nullable(false), this, "");

    private Dep(Name alias, Table<DepRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dep(Name alias, Table<DepRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dep</code> table reference
     */
    public Dep(String alias) {
        this(DSL.name(alias), DEP);
    }

    /**
     * Create an aliased <code>public.dep</code> table reference
     */
    public Dep(Name alias) {
        this(alias, DEP);
    }

    /**
     * Create a <code>public.dep</code> table reference
     */
    public Dep() {
        this(DSL.name("dep"), null);
    }

    public <O extends Record> Dep(Table<O> child, ForeignKey<O, DepRecord> key) {
        super(child, key, DEP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DepRecord> getPrimaryKey() {
        return Keys.DEP_PKEY;
    }

    @Override
    public Dep as(String alias) {
        return new Dep(DSL.name(alias), this);
    }

    @Override
    public Dep as(Name alias) {
        return new Dep(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dep rename(String name) {
        return new Dep(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dep rename(Name name) {
        return new Dep(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
